#!/bin/sh

# easymail v6.0
# Bruno "GNUser" Dantas GPLv3

# user variables:
host='smtps://smtps-proxy.fastmail.com'
port='443'
user='dantas@airpost.net'
password="zy6xe4xaclc4v733"

main()
{
	# internal variables
	attachments_file=$(mktemp)
	eml_file=$(mktemp)

	get_commandline_options "$@"
	[ -z "$body" ] && get_stdin
	build_eml_file
	send_eml_file
}

show_usage()
{
	echo "Usage: easymail -d <destination> [-s <subject>] [-b <body>] [-a <attachment>]

Notes:
 - destination: an email address (if multiple, precede each one with -d)
 - subject: a string
 - body: stdin, -b string, or -b file. examples:
	 1. echo 'some string' | easymail
	 2. easymail </path/to/some-text-file
	 3. easymail -b 'some string'
	 4. easymail -b /path/to/some-text-file
 - attachment: a file (if multiple, precede each one with -a)

Example:
 easymail -d somebody@somewhere.com -s 'UNIX' -b 'UNIX is fun!' -a K&RC.pdf"
}

attach()
{
	# append a header for the attachment 
	filename="$(basename "$1")"
	echo "------7II5XTH4IPXG2QZOY8LJF98QQX4IR3
Content-Transfer-Encoding: base64
Content-Type: application/octet-stream;
 name=\"$filename\"
Content-Disposition: attachment;
 filename=\"$filename\";
" >>$attachments_file

	# encode and append the attachment
	cat "$1" | base64 >>$attachments_file
}

cleanup()
{
	rm -f $eml_file $attachments_file
}
trap cleanup EXIT HUP TERM INT

get_stdin()
{
		body="$(timeout 1 dd bs=1 count=1 2>/dev/null && cat)"

	# dd has 1 sec to get 1 byte, which is plenty of time if there is data
	# in stdin waiting to be read. If dd succeeds, it passes its byte to stdout
	# and triggers cat, which has unlimited time to get remaining data.
	# This seems complicated but is necessary: using just cat causes script to 
	# hang if there is no data in stdin.
}

get_commandline_options()
{
	while [ "$#" -gt 0 ]; do
		case "$1" in
			-d)	
				curl_destination="${curl_destination}--mail-rcpt $2 "
				header_destination="${header_destination}$2, "
				shift 2
				;;
			-s) 
				subject="$2"
				shift 2
				;;
			-b) 
				body="$2"
				shift 2
				;;
			-a) 
				attach "$2"
				shift 2
				;;
			-*)
				echo "Invalid option: $1"
				shift
				;;
			*)
				shift
				;;
		esac
	done
}

build_eml_file()
{
	# create header
	echo "MIME-Version: 1.0
Content-Type: multipart/mixed; boundary=\"----7II5XTH4IPXG2QZOY8LJF98QQX4IR3\"
Content-Transfer-Encoding: 8bit
Subject: $subject
From: Easymail <easymail@unixrules.nix>
Date: $(date -R)
To: $header_destination

------7II5XTH4IPXG2QZOY8LJF98QQX4IR3
Content-Transfer-Encoding: 8bit
Content-Type: text/plain;
 charset=UTF-8
" >$eml_file

	# append body
	if [ -f "$body" ]; then
		cat "$body" >>$eml_file
	else
		echo "$body" >>$eml_file
	fi

	# append attachment(s) if applicable
	if [ -f "$attachments_file" ]; then
		cat "$attachments_file" >>$eml_file
	fi
}

send_eml_file()
{
	curl --url ${host}:${port} --ssl-reqd --upload-file $eml_file $curl_destination --user ${user}:${password} >/dev/null 2>&1
}

if [ "$#" -le 1 ]; then
	show_usage
else
	main "$@"
fi
